---
# tasks file for deploy_pki_cert
- name: Localhost block
  delegate_to: localhost
  block:

    - name: Create temporary build directory
      ansible.builtin.tempfile:
        state: directory
      register: tempfile

    - name: Generate a configuration file which is used to generate a csr and key
      ansible.builtin.template:
        src: openssl.j2
        dest: "{{ tempfile['path'] }}/openssl.conf"
        mode: "0644"
      register: config_stat

    - name: Sub block
      when: config_stat is succeeded
      block:

        - name: Generate a private key and CSR
          ansible.builtin.shell: |
            openssl req -new -newkey rsa:4096 -days 365 -sha256 -nodes \
            -out {{ tempfile['path'] }}/{{ inventory_hostname }}.csr \
            -keyout {{ tempfile['path'] }}/{{ inventory_hostname }}.key \
            -config {{ config_stat['dest'] }}

        - name: Slurp the CSR file contents
          ansible.builtin.slurp:
            src: "{{ tempfile['path'] }}/{{ inventory_hostname }}.csr"
          register: csr_content

        - name: Set a shortened string variable for future task
          ansible.builtin.set_fact:
            pki_request_data: "{{ data1_string }}\
                              {{ csr_content['content'] | b64decode | 
                                regex_replace('\n') | regex_replace('([+])','%2B') | 
                                regex_replace(' ','+') }}{{ data2_string }}" 
      rescue:

        - name: Clean  up the temp folders
          ansible.builtin.file:
            path: "{{ tempfile['path'] }}"
            state: absent

        - name: Fail
          ansible.builtin.fail:
            msg: "Failed getting certificate"

    - name: Request the certificate from the PKI Server
      ansible.builtin.shell: |
        set -o pipefail;
        curl -s -k -u "{{ ad_user}}:{{ ad_pass }}" \
        --ntlm {{ header_content|regex_replace('\n') }} {{ pki_ca_req_url }} \
        --data-raw "{{ pki_request_data }}" | grep certnew.cer | grep location
      changed_when: false
      register: mycert_request
      when: csr_content is succeeded

  rescue:

        - name: Clean  up the temp folders
          ansible.builtin.file:
            path: "{{ tempfile['path'] }}"
            state: absent

        - name: Fail
          ansible.builtin.fail:
            msg: "Failed download of certificate"

- name: Download the certificate from the PKI server
  ansible.builtin.shell: |
    curl -k -u {{ ad_user }}:{{ ad_pass }} \
    --ntlm {{ header_content|regex_replace('\n') }} \
    -o /etc/pki/tls/certs/{{ ansible_fqdn }}.crt \
    {{ pki_ca_url }}/{{ (mycert_request['stdout_lines'][0]).split('"')[1][:-1] }}
  become: true
  register: mycert_download
  when: csr_content is succeeded

- name: Upload csr and private key files to host
  copy:
    src: "{{ item['name'] }}"
    dest: "{{ item['upload_path'] }}"
    owner: root
    group: root
    mode: 0644
  become: True
  register: pki_stat
  loop: 
    - name: "{{ tempfile['path'] }}/{{ inventory_hostname }}.key"
      upload_path: "/etc/pki/tls/private/{{ inventory_hostname }}.key"
    - name: "{{ tempfile['path'] }}/{{ inventory_hostname }}.csr"
      upload_path: "/etc/pki/tls/misc/{{ inventory_hostname }}.csr"

- name: Grab the CA certificate and update the ca-trust
  ansible.builtin.shell: |
    curl -s -k -u {{ ad_user }}:{{ ad_pass }} --ntlm {{ header_content|regex_replace('\n') }} \
    -o /etc/pki/ca-trust/source/anchors/{{ pki_ca_host }}.pem \
    https://{{ pki_ca_host }}/certsrv/certnew.cer?ReqID=CACert&Renewal=0&Enc=bin;
    update-ca-trust;
  become: true
  register: mycert_download

- name: Run cert validation script to ensure crt matches the key
  become: True
  script: validate_cert.sh
  register: validation

# name: Generate a PFX file for java related programs just in case someone requires it 
# become: True
# shell: 'openssl pkcs12 -export -out /etc/pki/tls/certs/{{ inventory_hostname }}.p12 -inkey /etc/pki/tls/private/{{ inventory_hostname }}.key -in /etc/pki/tls/certs/{{ inventory_hostname }}.crt -certfile /etc/pki/ca-trust/source/anchors/{{ my_ca_pem_file }} -password pass:changeit'
# when: ca_stat.stat.exists
# tags:
#   - pfx

